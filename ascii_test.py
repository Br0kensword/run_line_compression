import ascii_transport as ascii
import unittest, json
 
class TestAdd(unittest.TestCase):
    """
    Test the encode and decode functions for ascii_transport 
    """
 
    def test_empty_file(self):
        """
        Test that encode will raise an error if given an empty file
        """
        path = './empty.txt'
        image = open(path, 'r')
        data = image.read()
        image.close()
        result = ascii.encode(data)

        self.assertEqual(result, False)

    def test_encode_output(self):
        """
        Test that encode outputs a json object with the anticipated format and content
        """
        path = './data.txt'
        image = open(path, 'r')
        data = image.read()
        image.close()

        expected = {'data': " 41/,2/\n1/ 39/,1/:1/@2/:1/,1/\n1/ 38/,1/#1/@4/+1/,1/\n1/ 37/,1/#1/@1/'1/,2/+1/@1/+1/,1/\n1/ 36/,1/#1/@1/'1/,4/+1/@1/+1/,1/\n1/ 35/,1/#1/@1/'1/,6/+1/@1/+1/,1/\n1/ 34/,1/#1/@1/'1/,8/+1/@1/+1/,1/\n1/ 33/,1/#1/@1/'1/,10/+1/@1/+1/,1/\n1/ 32/,1/#1/@1/'1/,12/+1/@1/+1/,1/\n1/ 31/,1/#1/@1/'1/,14/+1/@1/+1/,1/\n1/ 30/,1/#1/@1/'1/,16/+1/@1/+1/,1/\n1/ 29/,1/#1/@1/'1/,18/+1/@1/+1/,1/\n1/ 28/,1/#1/@1/'1/,20/+1/@1/+1/,1/\n1/ 27/,1/#1/@1/'1/,22/+1/@1/+1/,1/\n1/ 26/,1/#1/@1/'1/,24/+1/@1/+1/,1/\n1/ 25/,1/#1/@1/'1/,26/+1/@1/+1/,1/\n1/ 24/,1/#1/@1/'1/,28/+1/@1/+1/,1/\n1/ 23/,1/#1/@1/'1/,30/+1/@1/+1/,1/\n1/ 22/,1/#1/@1/'1/,32/+1/@1/+1/,1/\n1/ 21/,1/#1/@1/'1/,34/+1/@1/+1/,1/\n1/ 20/,1/#1/@1/'1/,36/+1/@1/+1/,1/\n1/ 19/,1/#1/@1/'1/,38/+1/@1/+1/,1/\n1/ 18/,1/#1/@1/'1/,40/+1/@1/+1/,1/\n1/ 17/,1/#1/@1/'1/,42/+1/@1/+1/,1/\n1/ 16/,1/#1/@1/'1/,44/+1/@1/+1/,1/\n1/ 15/,1/#1/@1/'1/,46/+1/@1/+1/,1/\n1/ 14/,1/#1/@1/'1/,19/+1/@1/#2/@2/;1/,22/+1/@1/+1/,1/\n1/ 13/,1/#1/@1/'1/,18/@1/#1/@7/#1/;1/,21/+1/@1/+1/,1/\n1/ 12/,1/#1/@1/'1/,17/;1/#1/@12/,21/+1/@1/+1/,1/\n1/ 11/,1/#1/@1/'1/,17/+1/@15/,21/+1/@1/+1/,1/\n1/ 10/,1/#1/@1/'1/,17/+1/@17/,5/#1/;1/,14/+1/@1/+1/,1/\n1/ 9/,1/#1/@1/'1/,17/'1/@18/;1/,4/;1/@1/#1/;1/,13/+1/@1/+1/,1/\n1/ 8/,1/#1/@1/'1/,17/:1/@19/#1/,5/:1/@2/#1/:1/,12/+1/@1/+1/,1/\n1/ 7/,1/#1/@1/'1/,18/#1/@21/,6/'1/@3/,12/+1/@1/+1/,1/\n1/ 6/,1/#1/@1/'1/,18/#1/@23/:1/,3/@5/#1/;1/,11/+1/@1/+1/,1/\n1/ 5/,1/#1/@1/'1/,18/@28/#1/@8/,11/+1/@1/+1/,1/\n1/ 4/,1/#1/@1/'1/,18/@39/,11/+1/@1/+1/,1/\n1/ 3/,1/#1/@1/'1/,18/@34/#1/@5/,12/+1/@1/+1/,1/\n1/ 2/,1/#1/@1/'1/,18/@35/,19/+1/@1/+1/,1/\n1/ 1/,1/#1/@1/'1/,5/;1/,12/@5/#1/'1/,1/#1/@26/,21/+1/@1/+1/,1/\n1/ 1/:1/@1/'1/,6/:1/,11/#1/@5/,4/+1/@23/#1/,23/+1/@1/:1/\n1/,1/@2/,8/@1/:1/,7/+1/@5/,7/'1/@22/,25/@2/,1/\n1/,1/@2/,9/#1/@1/,4/+1/#1/@2/#1/@1/:1/,9/;1/#1/@11/#1/@6/#1/,26/@2/,1/\n1/ 1/:1/@1/+1/,9/@1/#3/@4/#1/,14/@10/,2/+1/@4/#1/:1/,25/+1/@1/:1/\n1/ 1/,1/+1/@1/+1/,10/'1/+2/;1/,18/;1/@6/#1/,3/+1/@3/:1/,26/+1/@1/+1/,1/\n1/ 2/,1/+1/@1/+1/,33/@5/:1/,3/@2/#1/,27/+1/@1/+1/,1/\n1/ 3/,1/+1/@1/+1/,32/;1/@4/:1/,3/@2/;1/,26/+1/@1/+1/,1/\n1/ 4/,1/+1/@1/+1/,32/@4/:1/,3/#1/@1/,26/+1/@1/+1/,1/\n1/ 5/,1/+1/@1/+1/,31/;1/@3/;1/,1/:1/,1/#1/,26/+1/@1/+1/,1/\n1/ 6/,1/+1/@1/+1/,31/#1/@2/;1/,1/@1/'1/#1/,25/+1/@1/+1/,1/\n1/ 7/,1/+1/@1/+1/,30/@3/'1/,2/;1/,25/+1/@1/+1/,1/\n1/ 8/,1/+1/@1/+1/,30/@2/#1/,27/+1/@1/+1/,1/\n1/ 9/,1/+1/@1/+1/,29/@3/,26/+1/@1/+1/,1/\n1/ 10/,1/+1/@1/+1/,28/+1/@2/,25/+1/@1/+1/,1/\n1/ 11/,1/+1/@1/+1/,28/@2/;1/,23/+1/@1/+1/,1/\n1/ 12/,1/+1/@1/+1/,27/@4/#1/,20/+1/@1/+1/,1/\n1/ 13/,1/+1/@1/+1/,26/'1/@6/#1/:1/,15/+1/@1/+1/,1/\n1/ 14/,1/+1/@1/+1/,27/:1/'1/@2/#2/@1/#1/@1/'1/,11/+1/@1/+1/,1/\n1/ 15/,1/+1/@1/+1/,32/:1/'1/@2/#1/@1/#1/'1/,6/+1/@1/+1/,1/\n1/ 16/,1/+1/@1/+1/,36/+1/@1/,6/+1/@1/+1/,1/\n1/ 17/,1/+1/@1/+1/,42/+1/@1/+1/,1/\n1/ 18/,1/+1/@1/+1/,40/+1/@1/+1/,1/\n1/ 19/,1/+1/@1/+1/,38/+1/@1/+1/,1/\n1/ 20/,1/+1/@1/+1/,36/+1/@1/+1/,1/\n1/ 21/,1/+1/@1/+1/,34/+1/@1/+1/,1/\n1/ 22/,1/+1/@1/+1/,32/+1/@1/+1/,1/\n1/ 23/,1/+1/@1/+1/,30/+1/@1/+1/,1/\n1/ 24/,1/+1/@1/+1/,28/+1/@1/+1/,1/\n1/ 25/,1/+1/@1/+1/,26/+1/@1/+1/,1/\n1/ 26/,1/+1/@1/+1/,24/+1/@1/+1/,1/\n1/ 27/,1/+1/@1/+1/,22/+1/@1/+1/,1/\n1/ 28/,1/+1/@1/+1/,20/+1/@1/+1/,1/\n1/ 29/,1/+1/@1/+1/,18/+1/@1/+1/,1/\n1/ 30/,1/+1/@1/+1/,16/+1/@1/+1/,1/\n1/ 31/,1/+1/@1/+1/,14/+1/@1/+1/,1/\n1/ 32/,1/+1/@1/+1/,12/+1/@1/+1/,1/\n1/ 33/,1/+1/@1/+1/,10/+1/@1/+1/,1/\n1/ 34/,1/+1/@1/+1/,8/+1/@1/+1/,1/\n1/ 35/,1/+1/@1/+1/,6/+1/@1/+1/,1/\n1/ 36/,1/+1/@1/+1/,4/+1/@1/+1/,1/\n1/ 37/,1/+1/@1/+1/,2/+1/@1/+1/,1/\n1/ 38/,1/+1/@4/+1/,1/\n1/ 39/,1/:1/@2/:1/,1/\n1/ 41/,2/\n1", "encode": 1}
        expected = json.dumps(expected)
        result = ascii.encode(data)

        self.assertEqual(result, expected)


    def test_encode_is_smaller_than_file(self):
        """
        Test that after encode the compressed file is smaller than the origin file
        """
        path = './data.txt'
        image = open(path, 'r')
        data = image.read()
        image.close()
        result = ascii.encode(data)

        self.assertLess(len(result), len(data))

    def test_inefficient_file(self):
        """
        Test that if encode is bigger than our original file we just send the original file
        """
        path = './cloud.txt'
        image = open(path, 'r')
        data = image.read()
        image.close()
        data = ascii.encode(data)
        encoded_data = json.loads(data)
        result = encoded_data['encode']

        self.assertEqual(result, 0)   

    def test_decode_equals_ascii(self):
        """
        Test that after encoding and decoding the returned string matches the original file
        """
        path = './akira.txt'
        image = open(path, 'r')
        data = image.read()
        image.close()
        compressed = ascii.encode(data)
        result = ascii.decode(compressed)

        self.assertEqual(result, data)
 
 
if __name__ == '__main__':
    unittest.main()